cmake_minimum_required(VERSION 3.6) 
project("What a miserable cat's life!" VERSION 0.3)


# Sets the build mode (default: release)
if(NOT (CMAKE_BUILD_TYPE STREQUAL "Debug"))
	set(CMAKE_BUILD_TYPE "Release")
else()
	set(
		DBG_FLAGS
		"-fsanitize=address"
		"-fsanitize=leak"
		"-fsanitize=undefined"
	)

	add_compile_options(-ggdb -Wextra ${DBG_FLAGS})
	add_link_options(${DBG_FLAGS})
endif()
message("Build type used: ${CMAKE_BUILD_TYPE}")

# Sets compiler arguments
add_compile_options(-Wall)
set(CMAKE_CXX_STANDARD 23)

# I'm not a pro for using cmake so thank you Alexander Shaduri: https://blog.shaduri.dev/easily-create-shared-libraries-with-cmake-part-1
# Gets SDL
find_package(SDL2 REQUIRED)
include_directories(${SDL2_INCLUDE_DIRS})

# Gets SDL_ttf
INCLUDE(FindPkgConfig)
PKG_SEARCH_MODULE(SDL2TTF REQUIRED SDL2_ttf>=2.0.0)

include_directories(BEFORE SYSTEM "/usr/include/nlibs")

# The path to all source files
set(
	LIB_SOURCES
	"code/src/Pos.cpp"
	"code/src/Animal.cpp"
	"code/src/Cat.cpp"
	"code/src/Dog.cpp"
	"code/src/Hitbox.cpp"
	"code/src/Warning.cpp"
	"code/src/Verbose.cpp"
	"code/src/Vector.cpp"
	#"code/src/AlogrithmHandler.cpp"
)

set(
	OTHER_DEPS
	"/usr/lib/libUtil.so"
	"/usr/lib/libArgumentParser.so"
)

# I took far too much time trying to make this work, I give up.
#execute_process(COMMAND "sprites/imgToHex")   # Convert all the Images into HexDump

# The path to the file that include all images hexDump (generated by `imgToHex`)
set(
	LIB_IMAGE
	"sprites/hexDump/images.cpp"
)


# Add a shared library target
add_library(ProjectSrc STATIC ${LIB_SOURCES})
add_library(Images SHARED ${LIB_IMAGE})
set_target_properties(Images PROPERTIES LINKER_LANGUAGE CXX)

# Make all non-exported symbols hidden by default
set_target_properties(ProjectSrc
    PROPERTIES
        CXX_VISIBILITY_PRESET hidden
)

# Treat the public symbols as exported
# (and not imported) by defining LIBRARY_BUILD
# when building the library.
target_compile_definitions(ProjectSrc
    PRIVATE
        LIBRARY_BUILD
)

# Export the library's public header path to dependent targets
target_include_directories(ProjectSrc
    INTERFACE
        ${CMAKE_CURRENT_SOURCE_DIR}
)

# Compile and link the executable
add_executable(main "code/src/main.cpp")
target_link_libraries(main PRIVATE 
	${SDL2_LIBRARIES}
	${SDL2TTF_LIBRARIES}
	${OTHER_DEPS}
	Images
	ProjectSrc
)