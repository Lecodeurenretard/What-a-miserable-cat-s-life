#!/bin/zsh

function getBetween() {
	local gotFirst=0	# false
	local res=""

	for (( i=1; i < ((${#1} + 1)); i++ )); do	# string begin at index 1
		char=${1[i]}

		if ((! $gotFirst)) && [[ "$char" = "$2" ]] ; then
			typeset gotFirst=1
			continue
		elif ((! $gotFirst)); then
			continue
		fi  


		if [[ $char = "$3" ]]; then
			echo $res
			return 0
		fi
		res="$res$char"	# concatenation...
	done

	echo ""
	return -1
}

[[ -d hexDump ]] || mkdir hexDump	# If hexDump doesn't exists, create it
echo -n '' > "hexDump/images.cpp"

[[ -d tmp ]] || mkdir tmp
echo '//Those variables are from the libImages.so lib.' > tmp/def

# Initializing the allDump array
echo "/** An array containing pointers to all image dumps */"	>  tmp/dump
echo "inline const unsigned char* allDump[] = {" 				>> tmp/dump

# Initializing the allDumpLen array
echo "/** An array containing the length of all image dumps (sorted in the same order as \`allDump\`) */"	>  tmp/dumpLen
echo "inline const unsigned int allDumpLen[] = {"															>> tmp/dumpLen

echo "/** An array containing all the names of folders. */" >  tmp/names
echo "inline const char* allNames[] = {"						>> tmp/names

echo "/** An array containing all {class}Count, should be used with \`allNames\`. */"		>  tmp/count
echo "inline size_t countList[] = {"															>> tmp/count

# Loop through all .bmp files
local imgTreated=0
local dirDone=0
typeset -A dirImgTreated=()	# associative array
for dir in $(find img -type d); do
	if [[ $dir = img ]]; then
		continue
	fi

	echo -e "\t${dir:t}Count,"		>> tmp/count
	echo -e "\t\"${dir[5, -1]}\"," >> tmp/names
	for file in $dir/*(.); do
		if [[ -v "$dirImgTreated"[$dir] ]]; then	# Checks if `$dirImgTreated[$dir]` exists
			typeset dirImgTreated[$dir:t]=0
		fi

		# Use `xxd` to get the hax dump of each image
		local fileBasename=$file:t
		local fileBasenameNoExtention=${fileBasename:r}
		local dumpLoc="hexDump/$fileBasenameNoExtention.h"

		xxd -u -i $file > $dumpLoc
		
		local varName="img_$(getBetween "$file" '/' '/')_${fileBasenameNoExtention}_bmp"	# Get first folder ie: /sprites/cat/cat01.bmp -> cat
		echo "#include \"$fileBasenameNoExtention.h\"" >> "hexDump/images.cpp"
		
		echo "extern unsigned char $varName;"			>> tmp/def
		echo "extern unsigned int  ${varName}_len;\n"	>> tmp/def

		echo "\t&$varName,"			>> tmp/dump
		echo "\t${varName}_len,"	>> tmp/dumpLen
	
		typeset dirImgTreated[$dir:t]=$(($dirImgTreated[$dir:t]+1))
		typeset imgTreated=$(($imgTreated+1))
	done
	dirDone=$(($dirDone + 1))
done

echo "// This file is generated by \`sprites/imgToHex\`, it shouldn't be modified for long term changes.\n" > tmp/all.hpp
echo "$(cat tmp/def)" 											>> tmp/all.hpp
echo "\n\n"														>> tmp/all.hpp

echo "$(cat tmp/dump)" 											>> tmp/all.hpp
echo "};"														>> tmp/all.hpp
echo "/** The size of \`allDump\` */"							>> tmp/all.hpp
echo "inline constexpr size_t allDumpSize = $imgTreated;\n\n"	>> tmp/all.hpp

echo "$(cat tmp/dumpLen)"										>> tmp/all.hpp
echo "};"														>> tmp/all.hpp
echo "/** The size of \`allDumpLen\` */"						>> tmp/all.hpp
echo "inline constexpr size_t allDumpLenSize = $imgTreated;\n\n">> tmp/all.hpp

echo "$(cat tmp/names)"											>> tmp/all.hpp
echo "};"														>> tmp/all.hpp
echo "inline constexpr size_t allNamesSize = $dirDone;\n\n"		>> tmp/all.hpp

for animal count in ${(kv)dirImgTreated}; do
	if [[ $animal = "other" ]]; then
		echo "/** How many animal sprites there are in \`allDump\`. */"		>> tmp/all.hpp
	else
		echo "/** How many $animal sprites there are in \`allDump\`. */"	>> tmp/all.hpp
	fi

	echo "inline constexpr uint8_t ${animal}Count	= $count;\n"			>> tmp/all.hpp
done

cat tmp/count	>> tmp/all.hpp
echo  "};"	>> tmp/all.hpp
echo -n "inline constexpr size_t countListSize = $dirDone;\n\n"		>> tmp/all.hpp


mv tmp/all.hpp ../code/include/Images.hpp	# I don't directly write to Images.hpp in case I want to comment this line
rm -r tmp